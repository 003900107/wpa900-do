#ifdef DO_SUBCORE
void _I2C1_EV_IRQHandler(void)
{
	//static uint8_t i;
    switch (EV_Word=I2C_GetLastEvent(I2C1))
    {

        /* Slave Transmitter Events */
//    case I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED:  /* EV1 */
//         I2C_SendData(I2C1, TxBuffer[Tx_Idx++]);
//        if (BufferSize == 1)       
//		 {
//            Tx_Idx = 0;
//         }
//        break;
//
//    case I2C_EVENT_SLAVE_BYTE_TRANSMITTED:          /* EV3 */
//        if (Tx_Idx < BufferSize)
//        {
//            I2C_SendData(I2C1, TxBuffer[Tx_Idx++]);
//        }
//
//        if (Tx_Idx == BufferSize)
//        {
//            Tx_Idx = 0;
//        }
//        break;

        /* Slave Receiver Events */
    case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED:         /* EV1 */
        I2C_AcknowledgeConfig(I2C1, ENABLE);
		break;
	case 0x00020044:
        case I2C_EVENT_SLAVE_BYTE_RECEIVED:              /* EV2 */
        RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
        if (Rx_Idx == BufferSize)  Rx_Idx = 0;
        break;


    case I2C_EVENT_SLAVE_STOP_DETECTED:             /* EV4 */
        /* Clear I2C1 STOPF flag: read of I2C_SR1 followed by a write in I2C_CR1 */
        (void)(I2C_GetITStatus(I2C1, I2C_IT_STOPF));
		I2C_Cmd(I2C1, ENABLE);
		
		//I2C_ITConfig(I2C1, I2C_IT_EVT | I2C_IT_BUF, DISABLE);
		//I2C_Cmd(I2C1, DISABLE);
		SlaveReceptionComplete = 1;
		//Deal_Comming();

        break;

		
    default:
     // I2C_DeInit(I2C1);
   	//I2C_Init(I2C1,&I2C_InitStruct);
	//I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_BUF|I2C_IT_ERR, ENABLE);
        //I2C_Cmd(I2C1, ENABLE);
	   // EV[i++&0x0ff]=EV_Word;
	    
        break;
    }
}
#endif